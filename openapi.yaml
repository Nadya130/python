openapi: 3.0.1
info:
  title: Credit servise
  description: 'This is a service where you can get a credit easily. Up to 517000 UAH and paying 30% per year.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: anyakul01@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://credit.swagger.io/v2

tags:
- name: credit
  description: here you can get a new credit or repay your existing credit
- name: user
  description: user info
paths:
  /Credit:
    post:
      tags:
      - credit
      summary: Add a new Credit
      operationId: addCredit
      requestBody:
        description: Credit that needs to be added. For logged users.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credit'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credit'
      responses:
        200:
          description: successful operation
          
        405:
          description: Invalid input
          
      security:
      - creditstore_auth:
        - write:credits
        - read:credits
      
    
  /Credit/findByStatus:
    get:
      tags:
      - credit
      summary: Finds Credits by status
      operationId: findCreditByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: unpaid
            enum:
            - unpaid
            - paid
      
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Credit'
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
        400:
          description: Invalid status value
      security:
      - creditstore_auth:
        - write:credits
        - read:credits
 
  /Credit/{creditId}:
    get:
      tags:
      - credit
      summary: Find credit by ID
      operationId: getCreditById
      parameters:
      - name: creditId
        in: path
        description: ID of credit to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Credit'
            application/json:
              schema:
                $ref: '#/components/schemas/Credit'
        400:
          description: Invalid ID supplied
        404:
          description: Credit not found
      security:
      - api_key: []
    
    delete:
      tags:
      - credit
      summary: Deletes a credit (credit is payed)
      operationId: deleteCredit
      parameters:
      - name: creditId
        in: path
        description: Credit id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successfully deleted
        400:
          description: Invalid ID supplied
        404:
          description: Credit not found
          
      security:
      - creditstore_auth:
        - write:credits
        - read:credits

  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        
      responses:
        200:
          description: successful operation
        405:
          description: Invalid input
          
      
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username/password supplied
          
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        405:
          description: Invalid input
      
  /user/{username}:
    put:
      tags:
      - user
      summary: Update data about user by username
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: was modified successfully
        400:
          description: Invalid user supplied
        404:
          description: User not found
      security:
      - api_key: []
      
    delete:
      tags:
      - user
      summary: Delete user by username
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        200:
          description: deleted successfully 
        400:
          description: Invalid username supplied
        404:
          description: User not found
          
          
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 11111
        username:
          type: string
          example: "Anna"
        firstName:
          type: string
          example: "Anna"
        lastName:
          type: string
          example: "Kulinchenko"
        password:
          type: string
          example: "1111"
        phone:
          type: string
          example: "0987352637"
        credits:
          type: array
          items:
            $ref: "#/components/schemas/Credit"
          
      xml:
        name: User
    
    Credit:
      type: object
      properties:
        id:
          type: integer
          example: 1111
        sum of credit:
          type: integer
          format: int64
          example: 1000
        date:
          type: string
          format: date-time
          example: 01/01/2020
        user:
          $ref: "#/components/schemas/User"
        bank:
          $ref: "#/components/schemas/Bank"
        status:
          type: string
          description: credit status
          enum:
          - unpaid
          - paid
      xml:
        name: Credit
    Bank:
      type: object
      properties:
        name:
          type: string
          example: "PrivatBank"
        budget:
          type: integer
          format: int64
          example: 517000
        credits:
          type: array
          items:
            $ref: "#/components/schemas/Credit"
      xml:
        name: Bank
        
  securitySchemes:
    creditstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:credits: modify credits in your account
            read:credits: read your credits
    api_key:
      type: apiKey
      name: api_key
      in: header
